version: '3.8'
services:
  rabbitmq_prod:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbitmq
    volumes:
      - /var/lib/rabbitmq
    ports:
      - '5672:5672'
    expose:
      - '5672'
    env_file:
      - .env
    networks:
      - cnm-network

  redis_prod:
    image: redis:latest
    container_name: redis
    hostname: redis
    volumes:
      - /var/lib/redis
    ports:
      - '6379:6379'
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_HOST=0.0.0.0
      - REDIS_PORT=6379
      - REDIS_USERNAME=cnm
      - REDIS_PASSWORD=secret
    env_file:
      - .env
    networks:
      - cnm-network

  server:
    build:
      context: ./
      dockerfile: Dockerfile
    container_name: server_prod
    ports:
      - '8080:8080'
    expose:
      - '8080'
    environment:
      REDIS_ADDRESS: redis:6379
    depends_on:
      - rabbitmq_prod
      - redis_prod
    networks:
      - cnm-network

networks:
  cnm-network:
    # restart: on-failure
#   mongodb_container:
#     build: ./mongors
#     restart: always
#     environment:
#       MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
#       MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
#       MONGO_INITDB_DATABASE: ${MONGO_DB}
#       MONGO_REPLICA_SET: ${MONGO_REPLICA_SET}
#       MONOGO_REPLICA_PORT: ${MONGO_REPLICA_PORT}
#     container_name: mongodb
#     ports:
#       - 27017:27017
#     volumes:
#       - mongodb_data_container:/data/db
#     env_file:
#       - .env

# volumes:
#   mongodb_data_container:
#     driver: local
# docker network create cnm-network
# docker network connect cnm-network redis
# docker network connect cnm-network rabbitmq
