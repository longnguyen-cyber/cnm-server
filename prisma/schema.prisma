datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "darwin-arm64"]
}

model users {
  id                               String    @id @default(auto()) @map("_id") @db.ObjectId
  name                             String    @unique
  password                         String
  displayName                      String?
  status                           String
  phone                            String?
  email                            String    @unique
  avatar                           String    @default("")
  isTwoFactorAuthenticationEnabled Boolean   @default(false)
  twoFactorAuthenticationSecret    String    @default("")
  isOwner                          Boolean?
  createdAt                        DateTime? @default(now())
  updatedAt                        DateTime? @updatedAt
  deletedAt                        DateTime?
  chats                            chats[]
  channel                          String[]  @db.ObjectId
  threads                          threads[]
  emojis                           emojis[]
}

model channels {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  isPublic    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  thread      threads[]
  // bookmark    bookmarks[]
  users       Json[]
  userCreated String?   @db.ObjectId
  timeThread  DateTime? @default(now())
}

model chats {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  // bookmark   bookmarks[]
  thread      threads[]
  userRequest String?   @db.ObjectId
  receiveId   String    @db.ObjectId
  senderId    String?   @db.ObjectId
  isFriend    Boolean?  @default(false)
  requestAdd  Boolean?  @default(false)
  user        users?    @relation(fields: [senderId], references: [id])
  timeThread  DateTime? @default(now())
}

model threads {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isEdited  Boolean?
  isReply   Boolean?
  isRecall  Boolean?  @default(false)

  receiveId String?   @db.ObjectId
  senderId  String?   @db.ObjectId
  user      users?    @relation(fields: [senderId], references: [id])
  chatId    String?   @db.ObjectId
  chats     chats?    @relation(fields: [chatId], references: [id])
  channel   channels? @relation(fields: [channelId], references: [id])
  channelId String?   @db.ObjectId

  //self relation
  threadId String?   @db.ObjectId
  reply    threads?  @relation("replys", fields: [threadId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replys   threads[] @relation("replys")

  replyToId String?   @db.ObjectId
  replysTo  threads?  @relation("replysTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replysTos threads[] @relation("replysTo")

  messages messages?
  emojis   emojis[]
  files    files[]
}

model messages {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  type      String    @default("text")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  threadId  String?   @unique @db.ObjectId
  thread    threads?  @relation(fields: [threadId], references: [id])
}

model emojis {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  emoji     String
  quantity  Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  senderId  String?   @unique @db.ObjectId
  user      users?    @relation(fields: [senderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  threadId  String?   @unique @db.ObjectId
  thread    threads?  @relation(fields: [threadId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("emojis")
}

model files {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  filename  String
  path      String
  size      Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  threadId  String?   @unique @db.ObjectId
  thread    threads?  @relation(fields: [threadId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
