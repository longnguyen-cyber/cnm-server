datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "darwin-arm64"]
}

model users {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String      @unique
  password    String
  displayName String
  status      String
  phone       String
  email       String      @unique
  avatar      String
  isOwner     Boolean?
  createdAt   DateTime?   @default(now())
  updatedAt   DateTime?   @updatedAt
  deletedAt   DateTime?
  chats       chats[]
  channel     String[]    @db.ObjectId
  channels    channels[]  @relation(fields: [channel], references: [id])
  threads     threads[]
  reactions   reactions[]
  token       tokens?
  isOnline    Boolean?    @default(false)
}

model tokens {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  accessToken  String
  refreshToken String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  email        String?   @unique
  user         users?    @relation(fields: [email], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model channels {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  isPublic    Boolean
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  thread      threads[]
  bookmark    bookmarks[]
  userId      String[]    @db.ObjectId
  users       users[]     @relation(fields: [userId], references: [id])
  userCreated String?     @unique @db.ObjectId
}

model chats {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?
  bookmark  bookmarks[]
  thread    threads[]
  receiveId String      @unique @db.ObjectId
  senderId  String?     @unique @db.ObjectId
  user      users?      @relation(fields: [senderId], references: [id])
}

model bookmarks {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  chat      chats?    @relation(fields: [chatId], references: [id])
  chatId    String?   @db.ObjectId
  channel   channels? @relation(fields: [channelId], references: [id])
  channelId String?   @db.ObjectId
}

model threads {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isEdited  Boolean?
  isReply   Boolean?
  isRecall  Boolean?  @default(false)

  receiveId String?   @unique @db.ObjectId
  senderId  String?   @unique @db.ObjectId
  user      users?    @relation(fields: [senderId], references: [id])
  chatId    String?   @unique @db.ObjectId
  chats     chats?    @relation(fields: [chatId], references: [id])
  channel   channels? @relation(fields: [channelId], references: [id])
  channelId String?   @unique @db.ObjectId

  //self relation
  threadId String?   @db.ObjectId
  reply    threads?  @relation("replys", fields: [threadId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replys   threads[] @relation("replys")

  messages  messages?
  reactions reactions[]
  files     files[]
}

model messages {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  threadId  String?   @unique @db.ObjectId
  thread    threads?  @relation(fields: [threadId], references: [id])
}

model reactions {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  react     String    @unique
  quantity  Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  userId    String?   @unique @db.ObjectId
  user      users?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  threadId  String?   @unique @db.ObjectId
  thread    threads?  @relation(fields: [threadId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model files {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  fieldname    String
  originalname String
  encoding     String
  mimetype     String
  destination  String
  filename     String
  path         String
  size         Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  threadId     String?   @unique @db.ObjectId
  thread       threads?  @relation(fields: [threadId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
